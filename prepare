#!/bin/bash
# prepare is run as the first script of a job. Its purpose is to create a new
# instance using terraform and install the gitlab-runner on it.

currentDir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
# shellcheck source=./base.sh
source "${currentDir}/base.sh"

set -eu

# run clean-up if anything errors (with set -e)
function cleanup {
   "${currentDir}/cleanup"
}
trap cleanup ERR

TERRAFORM_COMMIT=$(curl -L "$CUSTOM_ENV_CI_PROJECT_URL/-/raw/$CUSTOM_ENV_CI_COMMIT_SHA/schutzbot/terraform")

# Get all terraform config files
TEMP=$(mktemp -d)
git clone https://github.com/osbuild/gitlab-ci-terraform.git "$TEMP"
git -C "$TEMP" checkout "$TERRAFORM_COMMIT"

mv "$TEMP" "$JOB"

INTERNAL_NETWORK="false"
if [ "${CUSTOM_ENV_INTERNAL_NETWORK:-}" ]; then
  INTERNAL_NETWORK="true"
fi

tee "$JOB/${CUSTOM_ENV_RUNNER}/terraform.tfvars" << EOF
internal_network = ${INTERNAL_NETWORK}
job_name         = "${CUSTOM_ENV_CI_JOB_NAME}"
project          = "${CUSTOM_ENV_CI_PROJECT_NAME}"
branch           = "${CUSTOM_ENV_CI_COMMIT_BRANCH:-unset}"
pipeline_id      = "${CUSTOM_ENV_CI_PIPELINE_ID}"
pipeline_source  = "${CUSTOM_ENV_CI_PIPELINE_SOURCE}"
EOF

if [ "${CUSTOM_ENV_IAM_INSTANCE_PROFILE:-}" ]; then
    tee -a "$JOB/${CUSTOM_ENV_RUNNER}/terraform.tfvars" <<EOF
iam_instance_profile = "${CUSTOM_ENV_IAM_INSTANCE_PROFILE}"
EOF
fi

# Add GCP credentials to the JOB folder
echo "${CUSTOM_ENV_IMAGE_BUILDER_CI_GOOGLE_CREDENTIALS:-}" > "${JOB}/gcp-credentials.json"
export GOOGLE_APPLICATION_CREDENTIALS="${JOB}/gcp-credentials.json"

# Spin up the instance
terraform-wrapper init
terraform-wrapper apply -auto-approve

# Get its IP address and cache it in $JOB/ip. `terraform output` is actually
# pretty expensive call.
VM_IP=$(terraform-wrapper output -json | jq -r .ip_address.value[0])
echo "${VM_IP}" > "${JOB}/ip"

# Wait for the machine.
echo "Waiting for sshd to be available"
for i in $(seq 1 90); do
    if $SSH "$(sshUser)@${VM_IP}" >/dev/null 2>/dev/null; then
        break
    fi

    if [ "$i" == "90" ]; then
        echo 'Waited 90 seconds for sshd to start, exiting...'
        # Inform GitLab Runner that this is a system failure, so it
        # should be retried.
        exit "$SYSTEM_FAILURE_EXIT_CODE"
    fi

    sleep 1s
done

# RHEL in OpenStack must be subscribed here in order to install gitlab-runner
# dependencies (git)
SUBSCRIPTION_REQUIRED=$(jq -r '.subscriptionNeeded' "${JOB}/${CUSTOM_ENV_RUNNER}/config.json")
if [[ $SUBSCRIPTION_REQUIRED == "true" ]]; then
  set +x
  echo "${CUSTOM_ENV_V2_RHN_REGISTRATION_SCRIPT}" | $SSH "$(sshUser)@${VM_IP}" sudo bash
fi

PREPARE_SCRIPT=$(jq -r '.prepareScript' "${JOB}/${CUSTOM_ENV_RUNNER}/config.json")
if [[ $PREPARE_SCRIPT != "null" ]]; then
  echo "$PREPARE_SCRIPT" | $SSH "$(sshUser)@${VM_IP}" bash
fi

# If a Schutzfile is present and repositories are defined, write them to the specified repofile
if [ "$(curl -s -o /dev/null -w '%{http_code}' "$CUSTOM_ENV_CI_PROJECT_URL/-/raw/$CUSTOM_ENV_CI_COMMIT_SHA/Schutzfile")" = "200" ] && [ "${CUSTOM_ENV_NIGHTLY:=false}" != "true" ]; then
    SCHUTZFILE=$(curl -L "$CUSTOM_ENV_CI_PROJECT_URL/-/raw/$CUSTOM_ENV_CI_COMMIT_SHA/Schutzfile")
    KEYS=$(echo "$SCHUTZFILE" | jq keys - | jq -r .[] -)
    ARCH=$($SSH "$(sshUser)@${VM_IP}" uname -m)
    for KEY in $KEYS; do
        # if a runner's basename starts with the key in a schutzfile,
        # it's assumed schutzfile[key] applies to that runner
        if [[ "$(basename "$CUSTOM_ENV_RUNNER")" =~ "$KEY".* ]]; then
            REPOFILES_COUNT=$(echo "$SCHUTZFILE" | jq -r ."\"$KEY\".repos | length")
            for j in $(seq 0 $((REPOFILES_COUNT - 1))); do
                REPOFILEPATH=$(echo "$SCHUTZFILE" | jq -r ."\"$KEY\".repos[$j].file" -)
                REPOS=$(echo "$SCHUTZFILE" | jq -r ."\"$KEY\".repos[$j].$ARCH" -)
                LENGTH=$(echo "$REPOS" | jq length -)
                for i in $(seq 0 $((LENGTH - 1))); do
                    TITLE=$(echo "$REPOS" | jq -r .["$i"].title)
                    NAME=$(echo "$REPOS" | jq -r .["$i"].name)
                    BASEURL=$(echo "$REPOS" | jq -r .["$i"].baseurl)
                    REPOFILE+="[$TITLE]\nname=$NAME\nbaseurl=$BASEURL\nenabled=1\ngpgcheck=0\n"
                done
                # (over)write repository file
                echo -e "$REPOFILE" | $SSH "$(sshUser)@${VM_IP}" sudo tee "$REPOFILEPATH"
                unset REPOFILE
            done
        fi
    done
fi

# Install gitlab-runner
# NOTE: libdnf5 5.0.14 returns an error if the cache directory is missing, ignore it.
$SSH "$(sshUser)@${VM_IP}" sudo dnf clean all || true

# retry install because of a race condition in dnf/subscription-manager
# which causes git-core to be missing. Retry until gitlab-runner is
# actually installed
echo "INFO: Will install gitlab-runner"
for _LOOP_COUNTER in {0..30}; do
    set +e
    $SSH "$(sshUser)@${VM_IP}" sudo dnf install -y "https://gitlab-runner-downloads.s3.amazonaws.com/latest/rpm/gitlab-runner_$(runnerArch).rpm" || true
    set -e

    if $SSH "$(sshUser)@${VM_IP}" "rpm -q gitlab-runner"; then
        echo "INFO: gitlab-runner has been installed"
        break
    fi
    echo "INFO: retrying ...."
    sleep 10
done
$SSH "$(sshUser)@${VM_IP}" "rpm -q gitlab-runner"
